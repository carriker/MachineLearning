model <- train(classe ~ ., method="rf", data=training)
t2time <- proc.time()
tacc <- sum(predict(model, newdata=training) == training$classe) / length(training$classe)
vacc <- sum(predict(model, newdata=validation) == validation$classe) / length(validation$classe)
setup <- t1time - t0time
exec <- t2time - t1time
tacc
vacc
setup
exec
nothing <- training[1:2,15:16]
model <- train(classe ~ ., method="nnet", data=nothing)
names(nothing)
names(training)
nothing <- training[1:2,15:17]
model <- train(classe ~ ., method="nnet", data=nothing)
t0time <- proc.time()
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
t1time <- proc.time()
model <- train(classe ~ ., method="nnet", data=training)
t2time <- proc.time()
tacc <- sum(predict(model, newdata=training) == training$classe) / length(training$classe)
vacc <- sum(predict(model, newdata=validation) == validation$classe) / length(validation$classe)
setup <- t1time - t0time
exec <- t2time - t1time
tacc
vacc
exec
model <- train(classe ~ ., method="rpart", data=nothing)
t0time <- proc.time()
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
t1time <- proc.time()
model <- train(classe ~ ., method="rpart", data=training)
t2time <- proc.time()
tacc <- sum(predict(model, newdata=training) == training$classe) / length(training$classe)
vacc <- sum(predict(model, newdata=validation) == validation$classe) / length(validation$classe)
setup <- t1time - t0time
exec <- t2time - t1time
tacc
vacc
exec
model <- train(classe ~ ., method="svmPoly", data=nothing)
t0time <- proc.time()
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
t1time <- proc.time()
model <- train(classe ~ ., method="svmPoly", data=training)
o <- open("test", open="a")
o <- file("test", open="a")
close(o)
o <- file("test", open="a")
print tacc
tacc
print(tacc)
print(tacc, vacc)
print("%f %f", tacc, vacc)
print o, tacc
writeLines(cat(tacc, vacc, exec), o)
writeLines(as.character(cat(tacc, vacc, exec)), o)
close(o)
o <- file("test", open="a")
writeLines(as.character(cat(tacc, vacc, exec)), con = o)
close(o)
o <- file("test.text", open="a")
print o
o
writeLines(as.character(cat(tacc, vacc, exec)), con = o)
writeLines(o, as.character(cat(tacc, vacc, exec)))
writeLines(con = o, as.character(cat(tacc, vacc, exec)))
write(as.character(cat(tacc, vacc, exec)), file="test.txt")
flush(o)
write(as.character(cat(tacc, vacc, exec)), file="test.text")
flush(o)
close(o)
o <- file("test.txt", open="a+")
write(as.character(cat(tacc, vacc, exec)), file="test.txt")
flush(o)
write(as.character(cat(tacc, vacc, exec)), o)
flush(o)
write(cat(tacc, vacc, exec), o)
flush(o)
cat(tacc, vacc, exec)
as.matrix(cat(tacc, vacc, exec))
as.vector(cat(tacc, vacc, exec))
as.matrix(as.vector(cat(tacc, vacc, exec)))
close(o)
fo <- file("test.txt")
writeLines(as.character(cat(tacc, vacc, exec)), fo)
flush(fo)
close(fo)
t <- cat(tacc, vacc, exec)
t <- cat(t, cat(tacc, vac, exec))
t <- cat(t, cat(tacc, vacc, exec))
t
t <- cat(t, cat(tacc, vacc, exec))
t
test <- cat(tacc, vacc, exec)
test <- cat(test, tacc, vacc, exec)
test
test <- cat(tacc, vacc, exec)
close(fo)
fo <- file("test.txt", open="a")
writeLines(as.character(c(tacc, vacc, exec)), fo)
close(fo)
fo <- file("test.txt", open="a")
writeLines(as.character(c(tacc, vacc, exec)), fo)
close(fo)
library(caret)
raw_data <- read.csv("pml-training.csv")
no <- grep("^amp|^avg|^kur|^max|^min|^skew|^std|^user|^var|time|window$|^X$",
names(raw_data))
data <- raw_data[,-no]
simpler <- grep("roll|pitch|yaw|total|classe", names(data))
sdata <- data[,simpler]
fo <- file("test.txt", open = "w")
writeLines("Begin", fo)
close(fo)
methods <- c("AdaBag", "C5.0", "JRip", "knn", "nnet",
"OneR", "PART", "rf", "rpart", "svmPoly")
nothing <- sdata[1:3,15:17]
for (i in 1:10) {
junk <- train(classe ~ ., method=methods[i], data=nothing)
}
junk <- train(classe ~ ., method="C5.0", data=nothing)
junk <- train(classe ~ ., method="JRip", data=nothing)
junk <- train(classe ~ ., method="knn", data=nothing)
junk <- train(classe ~ ., method="nnet", data=nothing)
junk <- train(classe ~ ., method="OneR", data=nothing)
junk <- train(classe ~ ., method="PART", data=nothing)
junk <- train(classe ~ ., method="rf", data=nothing)
junk <- train(classe ~ ., method="rpart", data=nothing)
junk <- train(classe ~ ., method="svmLinear", data=nothing)
methods <- c("AdaBag", "C5.0", "JRip", "knn", "nnet",
"OneR", "PART", "rf", "rpart", "svmLinear")
for (i in 1:10) {
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
t1time <- proc.time()
model <- train(classe ~ ., method=methods[i], data=training)
t2time <- proc.time()
tlen <- length(training$classe)
vlen <- length(validation$classe)
tacc <- sum(predict(model, newdata=training) == training$classe) / tlen
vacc <- sum(predict(model, newdata=validation) == validation$classe) / vlen
exec <- t2time - t1time
file("test.txt", open = "a")
writeLines(as.character(c(methods[i], tacc, vacc, exec)), fo)
close(fo)
}
simplest <- grep("^total", names(sdata))
fdata <- sdata[,-simplest]
methods <- c("C5.0", "JRip", "knn", "PART", "rf")
fo <- file("test.txt", open = "w")
writeLines("Begin", fo)
close(fo)
for (i in 1:5) {
set.seed(964)
inTrain <- createDataPartition(y=fdata$classe, p=0.6, list=FALSE)
training <- fdata[inTrain,]
other <- fdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
t1time <- proc.time()
model <- train(classe ~ ., method=methods[i], data=training)
t2time <- proc.time()
tlen <- length(training$classe)
vlen <- length(validation$classe)
tacc <- sum(predict(model, newdata=training) == training$classe) / tlen
vacc <- sum(predict(model, newdata=validation) == validation$classe) / vlen
exec <- t2time - t1time
file("test.txt", open = "a")
writeLines(as.character(c(methods[i], tacc, vacc, exec)), fo)
close(fo)
}
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training1 <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing1 <- other[inTest,]
validation1 <- other[-inTest,]
simplest <- grep("^total", names(sdata))
training2 <- training1[,-simplest]
validation2 <- validation1[,-simplest]
testing2 <- testing1[,-simplest]
t1time <- proc.time()
modelC5 <- train(classe ~ ., method="C5.0", data=training1)
modelrf <- train(classe ~ ., method="rf", data=training1)
modelPART <- train(classe ~ ., method="PART", data=training2)
t2time <- proc.time()
finalanswer <- as.data.frame(validation1$classe)
finalanswer$C5 <- predict(modelC5, newdata=validation1)
finalanswer$rf <- predict(modelrf, newdata=validation1)
finalanswer$PART <- predict(modelPART, newdata=validation2)
write.csv(finalanswor, "test.csv")
t2time - t1time
write.csv(finalanswer, "test.csv")
set.seed(964)
inTrain <- createDataPartition(y=data$classe, p=0.6, list=FALSE)
training <- data[inTrain,]
other <- data[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
t1time <- proc.time()
full_modelC5 <- train(classe ~ ., method="C5.0", data=training)
t2time <- proc.time()
tlen <- length(training$classe)
vlen <- length(validation$classe)
tacc <- sum(predict(model, newdata=training) == training$classe) / tlen
vacc <- sum(predict(model, newdata=validation) == validation$classe) / vlen
exec <- t2time - t1time
tacc
vacc
sum(training$classe=="A")
sum(training$classe=="B")
sum(training$classe=="C")
sum(training$classe=="D")
sum(training$classe=="E")
sum(validation$classe=="E")
sum(validation$classe=="A")
sum(validation$classe=="B")
sum(validation$classe=="C")
sum(validation$classe=="D")
1116/3923
759/3923
684/3923
643/3923
721/3923
3348/11776
2279/11776
2054/11776
1930/11776
2165/11776
sum(testing$classe=="D")
sum(testing$classe=="E")
sum(testing$classe=="C")
sum(testing$classe=="B")
sum(testing$classe=="A")
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
tacc <- sum(predict(modelC5, newdata=training) == training$classe) / tlen
tacc
sum(predict(modelC5, newdata=validation) == validation$classe) / vlen
sum(predict(modelC5, newdata=testing) == testing$classe) / vlen
sum(predict(modelrf, newdata=testing) == testing$classe) / vlen
sum(predict(modelPART, newdata=testing) == testing$classe) / vlen
save.image("C:/DataScience/MachineLearning/.RData")
load("C:/DataScience/MachineLearning/.RData")
no <- grep("^amp|^avg|^kur|^max|^min|^skew|^std|^var|time|window$|^X$",names(raw_data))
bdata <- raw_data[,-no]
simpler <- grep("roll|pitch|yaw|total|classe", names(data))
bdata2 <- bdata[,simpler]
names(bdata2)
summary(bdata2$user_name)
data_adelmo <- bdata2[bdata2$user_name=="adelmo",]
data_carlitos <- bdata2[bdata2$user_name=="carlitos",]
data_charles <- bdata2[bdata2$user_name=="charles",]
data_eurico <- bdata2[bdata2$user_name=="eurico",]
data_jeremy <- bdata2[bdata2$user_name=="jeremy",]
data_pedro <- bdata2[bdata2$user_name=="pedro",]
set.seed(964)
inTrain <- createDataPartition(y=data_adelmo$classe, p=0.8, list=FALSE)
library(caret)
names(data_adelmo)
head(data_adelmo,1)
no <- grep("^amp|^avg|^kur|^max|^min|^skew|^std|^var|time|window$|^X$",
names(raw_data))
user_data <- raw_data[,-no]
simpler <- grep("user|roll|pitch|yaw|total|classe", names(user_data))
User_data2 <- user_data[,simpler]
adelmo_data <- user_data2[user_data2$user=="adelmo",]
carlitos_data <- user_data2[user_data2$user=="carlitos",]
charles_data <- user_data2[user_data2$user=="charles",]
eurico_data <- user_data2[user_data2$user=="eurico",]
jeremy_data <- user_data2[user_data2$user=="jeremy",]
pedro_data <- user_data2[user_data2$user=="pedro",]
no <- grep("^amp|^avg|^kur|^max|^min|^skew|^std|^var|time|window$|^X$",
names(raw_data))
user_data <- raw_data[,-no]
simpler <- grep("user|roll|pitch|yaw|total|classe", names(user_data))
user_data2 <- user_data[,simpler]
adelmo_data <- user_data2[user_data2$user=="adelmo",]
carlitos_data <- user_data2[user_data2$user=="carlitos",]
charles_data <- user_data2[user_data2$user=="charles",]
eurico_data <- user_data2[user_data2$user=="eurico",]
jeremy_data <- user_data2[user_data2$user=="jeremy",]
pedro_data <- user_data2[user_data2$user=="pedro",]
names(adelmo_data)
adelmo_data <- user_data2[user_data2$user=="adelmo",2:18]
carlitos_data <- user_data2[user_data2$user=="carlitos",2:18]
charles_data <- user_data2[user_data2$user=="charles",2:18]
eurico_data <- user_data2[user_data2$user=="eurico",2:18]
jeremy_data <- user_data2[user_data2$user=="jeremy",2:18]
pedro_data <- user_data2[user_data2$user=="pedro",2:18]
names(adelmo_data)
set.seed(964)
inTrain <- createDataPartition(y=adelmo_data$classe, p=0.8, list=FALSE)
adelmo_training <- adelmo_data[inTest,]
adelmo_testing <- adelmo_data[-inTest,]
inTrain <- createDataPartition(y=carlitos_data$classe, p=0.8, list=FALSE)
carlitos_training <- carlitos_data[inTest,]
carlitos_testing <- carlitos_data[-inTest,]
inTrain <- createDataPartition(y=charles_data$classe, p=0.8, list=FALSE)
charles_training <- charles_data[inTest,]
charles_testing <- charles_data[-inTest,]
inTrain <- createDataPartition(y=eurico_data$classe, p=0.8, list=FALSE)
eurico_training <- eurico_data[inTest,]
eurico_testing <- eurico_data[-inTest,]
inTrain <- createDataPartition(y=jeremy_data$classe, p=0.8, list=FALSE)
jeremy_training <- jeremy_data[inTest,]
jeremy_testing <- jeremy_data[-inTest,]
inTrain <- createDataPartition(y=pedro_data$classe, p=0.8, list=FALSE)
pedro_training <- pedro_data[inTest,]
pedro_testing <- pedro_data[-inTest,]
adelmo_model <- train(classe ~ ., method="C5.0", data=adelmo_training)
carlitos_model <- train(classe ~ ., method="C5.0", data=carlitos_training)
charles_model <- train(classe ~ ., method="C5.0", data=charles_training)
eurico_model <- train(classe ~ ., method="C5.0", data=eurico_training)
jeremy_model <- train(classe ~ ., method="C5.0", data=jeremy_training)
pedro_model <- train(classe ~ ., method="C5.0", data=pedro_training)
sum(predict(adelmo_model, newdata=adelmo_testing) == adelmo_testing$classe)
set.seed(964)
inTrain <- createDataPartition(y=adelmo_data$classe, p=0.8, list=FALSE)
adelmo_training <- adelmo_data[inTrain,]
adelmo_testing <- adelmo_data[-inTrain,]
inTrain <- createDataPartition(y=carlitos_data$classe, p=0.8, list=FALSE)
carlitos_training <- carlitos_data[inTrain,]
carlitos_testing <- carlitos_data[-inTrain,]
inTrain <- createDataPartition(y=charles_data$classe, p=0.8, list=FALSE)
charles_training <- charles_data[inTrain,]
charles_testing <- charles_data[-inTrain,]
inTrain <- createDataPartition(y=eurico_data$classe, p=0.8, list=FALSE)
eurico_training <- eurico_data[inTrain,]
eurico_testing <- eurico_data[-inTrain,]
inTrain <- createDataPartition(y=jeremy_data$classe, p=0.8, list=FALSE)
jeremy_training <- jeremy_data[inTrain,]
jeremy_testing <- jeremy_data[-inTrain,]
inTrain <- createDataPartition(y=pedro_data$classe, p=0.8, list=FALSE)
pedro_training <- pedro_data[inTrain,]
pedro_testing <- pedro_data[-inTrain,]
adelmo_model <- train(classe ~ ., method="C5.0", data=adelmo_training)
carlitos_model <- train(classe ~ ., method="C5.0", data=carlitos_training)
charles_model <- train(classe ~ ., method="C5.0", data=charles_training)
eurico_model <- train(classe ~ ., method="C5.0", data=eurico_training)
jeremy_model <- train(classe ~ ., method="C5.0", data=jeremy_training)
pedro_model <- train(classe ~ ., method="C5.0", data=pedro_training)
sum(predict(adelmo_model, newdata=adelmo_testing) == adelmo_testing$classe)
View(sdata)
770/778
sum(predict(carlitos_model, newdata=carlitos_testing) == carlitos_testing$classe) / length(carlitos_testing$classe)
sum(predict(charles_model, newdata=charles_testing) == charles_testing$classe) / length(charles_testing$classe)
sum(predict(eurico_model, newdata=eurico_testing) == eurico_testing$classe) / length(eurico_testing$classe)
sum(predict(jeremy_model, newdata=jeremy_testing) == jeremy_testing$classe) / length(jeremy_testing$classe)
sum(predict(pedro_model, newdata=pedro_testing) == pedro_testing$classe) / length(pedro_testing$classe)
99.0 + 3 * 99.2 + 99.4 + 4 * 98.9 + 8 * 98.2 + 3 * 99.8
1976.6/20
no <- grep("^amp|^avg|^kur|^max|^min|^skew|^std|^user|^var|time|window$|^X$",
names(raw_data))
data <- raw_data[,-no]
simpler <- grep("roll|pitch|yaw|total|classe", names(data))
sdata <- data[,simpler]
set.seed(964)
inTrain <- createDataPartition(y=sdata$classe, p=0.6, list=FALSE)
training <- sdata[inTrain,]
other <- sdata[-inTrain,]
inTest <- createDataPartition(y=other$classe, p=0.5, list=FALSE)
testing <- other[inTest,]
validation <- other[-inTest,]
training1 <- rbind(training, validation)
adelmo_model <- train(classe ~ ., method="C5.0", data=adelmo_training)
model <- train(classe ~ ., method="C5.0", data=training1)
sum(predict(model, newdata=testing) == testing$classe) / 3923
raw_test <- read.csv("pml-testing.csv")
no <- grep("^amp|^avg|^kur|^max|^min|^skew|^std|^user|^var|time|window$|^X$",
names(raw_data))
test <- raw_test[,-no]
simpler <- grep("roll|pitch|yaw|total", names(test))
test <- test[,simpler]
test$classe <- rep("X",20)
head(test,1)
tail(test,2)
predict(model, newdata=test[1])
predict(model, newdata=test[1,])
i <- 5
c("test",i)
as.character(c("test",i))
sprintf("test%02i", i)
ans <- predict(model, newdata=test[1,])
ans
ans[1]
as.character(ans)
for (i in 1:20) {
file(sprintf("test%02i",i), open = "w")
writeLines(as.character(predict(model, newdata=test[i,])), fo)
close(fo)
}
for (i in 1:20) {
fo <- file(sprintf("test%02i",i), open = "w")
writeLines(as.character(predict(model, newdata=test[i,])), fo)
close(fo)
}
for (i in 1:20) {
fo <- file(sprintf("test%02i.txt",i), open = "w")
writeLines(as.character(predict(model, newdata=test[i,])), fo)
close(fo)
}
.991*20
save.image("C:/DataScience/MachineLearning/.RData")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("gbm")
install.packages("lubridate")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(caret)
set.seed(33833)
model_rf <- train(vowel.train$y ~ ., model="rf", data=vowel.training)
model_rf <- train(y ~ ., model="rf", data=vowel.train)
model_gbm <- train(y ~ ., model="gbm", data=vowel.train)
acc_rf <- (predict(model_rf, newdata=vowel.test) == vowel.test$y)
acc_rf
acc_rf <- sum(predict(model_rf, newdata=vowel.test) == vowel.test$y)
acc_rf
length(vowel.test$y)
279/462
sum(predict(model_gbm, newdata=vowel.test) == vowel.test$y) / 462
ans_rf <- predict(model_rf, newdata=vowel.test)
ans_gbm <- predict(model_gbm, newdata=vowel.test)
(1 == 2)
(1 == 1) && (2 == 2)
sum((ans_rf == ans_gbm) && (ans_rf == vowel.test$y))
sum(ans_rf == anss_gbm)
sum(ans_rf == ans_gbm)
sum(ans_rf == vowel.test$y)
sum(((ans_rf == ans_gbm) && (ans_rf == vowel.test$y)))
((ans_rf == ans_gbm) && (ans_rf == vowel.test$y))
one_set <- ans_rf == ans_gbm
two_set <- ans_rf == vowel.test$y
together <- one_set && two_set
together <- one_set & two_set
sum(together)
256/462
library(caret)
library(gbm)
set.seed(3422)
set.seed(3433)
library(AppliodPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnose,predictors)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p= 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf <- train(diagnosis ~ ., model="rf", data=training)
model_gbm <- train(diagnosis ~ ., model="gbm", data=training)
model_lda <- train(diagnosis ~ ., model="lda", data=training)
sum(predict(model_rf, newdata=testing) == testing$diagnosis) / 82
sum(predict(model_gbm, newdata=testing) == testing$diagnosis) / 82
sum(predict(model_lda, newdata=testing) == testing$diagnosis) / 82
head(predict(model_lda, newdata=testing),3)
out1 <- predict(model_rf, newdata=testing)
out2 <- predict(model_gbm, newdata=testing)
out3 <- predict(model_lda, newdata=testing)
out <- if (out1 == out2) {out1} else if (out2 == out3) {out2} elseif (out1 == out3) {out3}
out <- if (out1 == out2) {out1} else {if (out2 == out3) {out2} else if {(out1 == out3) {out3}}}
out <- if (out1 == out2) out1 else {if (out2 == out3) out2 else if {(out1 == out3) out3}}
out <- if (out1 == out2) out1 else out3
length(out1)
for (i in 1:82) { if (out1[i] == out2[i]) out[i]=out1[i] else out[i]=out3[i] }
sum(out == testing$diagnosis)
64/82
